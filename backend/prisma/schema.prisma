generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Room {
  roomId      String @id
  startTimeMs BigInt
  endTimeMs   BigInt
  link        String @db.VarChar(512)
  createdAt   BigInt
  appointmentId BigInt? @map("appointment_id") @db.BigInt
  userTypeId  Int    @map("user_type_id") @db.SmallInt
  
  userType    UserType @relation(fields: [userTypeId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
}

model UserType {
  id         Int       @id @db.SmallInt
  typeName   String    @unique @map("type_name") @db.VarChar(100)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  users      User[]
  rooms      Room[]

  @@map("user_types")
}

model User {
  id            BigInt    @id @default(autoincrement()) @db.BigInt
  email         String    @unique @db.VarChar(255)
  username      String?   @unique @db.VarChar(100)
  passwordHash  String    @map("password_hash") @db.VarChar(255)
  fullName      String?   @map("full_name") @db.VarChar(255)

  phone         String?   @db.VarChar(50)
  phoneVerified Boolean   @default(false) @map("phone_verified")

  userTypeId    Int       @map("user_type_id") @db.SmallInt

  isActive      Boolean   @default(true) @map("is_active")
  isSystem      Boolean   @default(false) @map("is_system")

  doctorId      BigInt?   @map("doctor_id") @db.BigInt

  lastSeenAt    DateTime? @map("last_seen_at")

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  userType      UserType  @relation(fields: [userTypeId], references: [id])

  // Relations
  patientAppointments Appointment[] @relation("PatientAppointments")
  userAppointments    Appointment[] @relation("UserAppointments")

  @@map("users")
}

model Appointment {
  id                  BigInt    @id @default(autoincrement()) @db.BigInt
  uuid                String    @unique @db.Char(36) // UUID length
  slotId              BigInt?   @map("slot_id") @db.BigInt
  doctorPracticeId    BigInt?   @map("doctor_practice_id") @db.BigInt
  patientId           BigInt?   @map("patient_id") @db.BigInt
  userId              BigInt?   @map("user_id") @db.BigInt
  status              Int       @default(0) @db.SmallInt
  fee                 Int?
  discount            Int?
  paymentStatus       Int?      @map("payment_status") @db.SmallInt
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime? @map("updated_at")
  deletedAt           DateTime? @map("deleted_at")

  // Relations
  rooms               Room[]
  slot                AppointmentSlot? @relation(fields: [slotId], references: [id])
  doctorPractice      DoctorPractice? @relation(fields: [doctorPracticeId], references: [id])
  patient             User? @relation("PatientAppointments", fields: [patientId], references: [id])
  user                User? @relation("UserAppointments", fields: [userId], references: [id])

  @@map("appointments")
}

model AppointmentSlot {
  id          BigInt    @id @default(autoincrement()) @db.BigInt
  startTime   DateTime  @map("start_time")
  endTime     DateTime  @map("end_time")
  isAvailable Boolean   @default(true) @map("is_available")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  appointments Appointment[]

  @@map("appointment_slots")
}

model DoctorPractice {
  id          BigInt    @id @default(autoincrement()) @db.BigInt
  name        String    @db.VarChar(255)
  address     String?   @db.Text
  phone       String?   @db.VarChar(50)
  email       String?   @db.VarChar(255)
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  appointments Appointment[]

  @@map("doctor_practices")
}

model AppointmentStatus {
  id          Int       @id @db.TinyInt
  title       String    @db.VarChar(100)
  statusKey   String    @unique @map("status_key") @db.VarChar(50)
  description String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("appointment_statuses")
}


